{
  "ApiConfig": {
    "Api": {
      "Author": "AGDevX",
      "AuthorUrl": "https://github.com/AGDevX",
      "Name": "Spider Api",
      "Description": "Starter / educational / inspirational RESTful Web API",
      "AutoCreateUsers": true,
      "NewUsersActiveByDefault": true,
      "SystemUserId": "f08f4be5-35a3-4864-9b24-e7ec5b441c3f"
    },
    "Solution": {
      "AssemblyPrefixes": [ "AGDevX" ]
    },
    "Security": {
      "CorsPolicy": "DefaultCorsPolicy"
    },
    "Auth": {
      "OAuth": {
        "AuthenticationScheme": "Bearer",
        "RoleClaimType": "roles",
        "Domain": "agdevx.auth0.com",
        "Authority": "https://agdevx.auth0.com/",
        "Issuer": "https://agdevx.auth0.com/",
        "AuthorizationUrl": "https://agdevx.auth0.com/authorize",
        "AuthorizationUrlRequiresAudience": true,
        "AuthorizationUrlRequiresNonce": true,
        "TokenUrl": "https://agdevx.auth0.com/oauth/token",
        "UserInfoUrl": "https://agdevx.auth0.com/userinfo",
        "JsonWebKeySetUrl": "https://agdevx.auth0.com/.well-known/jwks.json",
        "ApiScopes": {
          "Access to the API": "api:access"
        }
      },
      "Oidc": {
        "OpenIDConnectDiscoveryUrl": "https://agdevx.auth0.com/.well-known/openid-configuration",
        "RequireHttpsMetadata": true,
        "Scopes": {
          "Declares the OAuth 2.0 request is an OpenID Connect request": "openid",
          "Requests access to the End-User's default profile Claims": "profile",
          "requests access to the email and emailverified Claims": "email",
          "This scope value requests that an OAuth 2.0 Refresh Token be issued that can be used to obtain an Access Token that grants access to the End-User's UserInfo Endpoint even when the End-User is not present (not logged in)": "offline_access"
        }
      }
    }
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "Serilog": {
    "Properties": {
      "App": "Spider Api"
    },
    "Using": [ "Serilog.Sinks.Async", "Serilog.Sinks.Console" ],
    "Enrich": [
      "FromLogContext",
      "WithMachineName",
      "WithEnvironmentName",
      "WithEnvironmentUserName",
      "WithThreadId",
      "WithThreadName",
      "WithExceptionDetails"
    ],
    "MinimumLevel": {
      "Default": "Information",
      "Override": {
        "Microsoft": "Warning",
        "Microsoft.Hosting.Lifetime": "Information"
      }
    },
    "WriteTo": [
      {
        "Name": "Async",
        "Args": {
          "configure": [
            {
              "Name": "Console",
              "Args": {
                "outputTemplate": "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}"
                //"outputTemplate": "[{Timestamp:HH:mm:ss} {Level:u3} {App}] {Message:lj} <s:{SourceContext}> <{RequestId}> <{MachineName}> <{EnvironmentName}> <{EnvironmentUserName}>  <{ThreadId}> <{ThreadName}> {NewLine}{Exception}{NewLine}"
              }
            }
          ]
        }
      }
    ]
  }
}